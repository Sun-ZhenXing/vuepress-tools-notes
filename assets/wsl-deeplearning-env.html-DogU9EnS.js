import{_ as r,r as c,o as D,c as y,b as a,d as s,a as n,w as l,e}from"./app-DBeBKcYQ.js";const i={},C=a("h1",{id:"wsl-2-中搭建深度学习环境",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#wsl-2-中搭建深度学习环境"},[a("span",null,"WSL 2 中搭建深度学习环境")])],-1),d={class:"table-of-contents"},E=e('<h2 id="1-wsl-2-进行深度学习的最佳实践" tabindex="-1"><a class="header-anchor" href="#1-wsl-2-进行深度学习的最佳实践"><span>1. WSL 2 进行深度学习的最佳实践</span></a></h2><p>【Q】为什么使用 Docker 进行深度学习？</p><p>【A】WSL 2 Docker 内执行速度大约为 Ubuntu 主机的 80%，带来了一些性能牺牲。但是 Docker 的优势远比这点损失来的多：</p><ul><li>随时启动和停止一个环境</li><li>环境与主机隔离，主机可以正在做别的事情</li><li>同时运行多个环境，并分配 GPU</li><li>随意切换 CUDA 版本</li><li>随时备份和恢复一个环境，可将镜像迁移到不同机器上运行</li></ul><p>【Q】为什么使用 WSL 2 进行深度学习？</p><p>【A】可以同时使用 Linux 的训练环境和 Windows 的便捷界面，而且互不影响，可以协同工作。</p><p>【Q】如果我的数据集较大（或者在外置磁盘中），应该如何操作？</p><p>【A】创建容器时使用 <code>-v host_path:container_path</code> 挂载路径，Windows 和 Docker 容器可共享此路径，这样可以直接在 Windows 下操作文件，然后在容器内训练，建议所有深度学习的容器都挂载同一个位置，方便共享数据。详细操作见下文。（注意：这不适合大数据集，因为 WSL 2 的跨文件系统 I/O 性能较差，如果希望在 WSL 2 中使用高性能的 I/O，建议复制到 Linux 内）。</p><p>【Q】如果我想使用 TensorBoard 或者 Jupyter 怎么办？</p><p>【A】映射端口即可，见下文。如果你希望使用 Matplotlib 等绘图工具，建议在 Jupyter 中进行。</p><p>【Q】如果我希望使用 IDE 在容器内开发程序，并进行调试，应该怎么做？</p>',11),u=a("p",null,"【Q】我在创建容器之后想修改容器的配置，如增加挂载和映射端口应该怎么做？",-1),A=e(`<p>【Q】如果我想快速存取文件，例如取出权重文件，或指定测试文件，但是这个路径不在共享路径下怎么办？</p><p>【A】使用 <code>docker cp</code> 复制文件，可以从主机复制到容器，也可以从容器复制到主机。</p><p>还可以开启 HTTP 服务或者 FTP 服务，可以互相访问内容。容器可以直接读取主机监听的端口，从而可以直接 <code>wget</code> 下载主机的文件。开启 HTTP 服务：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">python</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-m</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">http.server</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">8000</span></span>
<span class="line"></span></code></pre></div><p>也有许多的第三方软件，可在不同环境共享文件。</p><p>【Q】如果需要不同的依赖环境，有哪些做法？</p><p>【A】大致可有下面两种做法：</p><ol><li>在不同的容器内进行开发，PyTorch 拉取 PyTorch 镜像，TensorFlow 拉取 TensorFlow 镜像，可以拉取各种不同版本的镜像，单独来开发，环境全部相互隔离。缺点是占用空间较大，不过这点空间和训练集相比可以忽略。</li><li>在同一个基础容器（指 CUDA 容器，普通容器不行）内使用 Miniconda 创建虚拟环境开发，好处是操作简单，占用小。缺点是无法隔离 CUDA、cuDNN 等环境，不过影响不大，因为现代框架支持性较好，可提供不同版本的框架。</li></ol><p>各种不同的镜像拉取示例：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pull</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">tensorflow/tensorflow:2.11.0</span></span>
<span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pull</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pytorch/pytorch:1.13.1-cuda11.6-cudnn8-runtime</span></span>
<span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pull</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">nvidia/cuda:11.8.0-base-ubuntu22.04</span></span>
<span class="line"></span></code></pre></div><p>如果本地网络较差，可使用代理拉取，也可以配置 Docker 镜像，或者在云端拉取然后将打包回传到本地。</p><p>【Q】Docker 没有 GUI，因此无法使用 <code>cv2.imshow</code>，有时还不能导入 <code>cv2</code>，怎么解决？</p><p>无法导入 OpenCV 时，确保 OpenCV 的安装顺序，或者只安装有 <code>-headless</code> 后缀的版本。</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-python</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-contrib-python</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-python-headless</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-contrib-python-headless</span></span>
<span class="line"></span></code></pre></div><p>无法显示图片，这个除非有图形界面，使用 <code>cv2.imwrite</code>，然后在 Windows 下查看即可。</p><p>【Q】如果希望备份整个开发环境，应该怎么办？</p><p>【A】Docker 可将容器导出为镜像，镜像可以随时备份为文件，可以迁移到其他电脑或其他任何环境。使用 <code>docker commit</code> 可导出容器为镜像，<code>docker save</code> 可将镜像压缩为一个文件。还可以使用 Docker Hub 共享镜像到社区。</p>`,17),h=a("code",null,"wsl --export",-1),b=e(`<h2 id="2-条件准备" tabindex="-1"><a class="header-anchor" href="#2-条件准备"><span>2. 条件准备</span></a></h2><ul><li>主机是现代 CPU 且是 x86 架构，安装有现代的 NVIDIA 显卡</li><li>需要 Windows 10 以上并安装有 WSL 2。如果不了解如何安装可参考网络</li><li>首先需要安装 Docker Desktop，这同时会安装 WSL 2 的两个容器 <code>docker-desktop-data</code> 和 <code>docker-desktop</code></li></ul><h2 id="3-如何使用" tabindex="-1"><a class="header-anchor" href="#3-如何使用"><span>3. 如何使用</span></a></h2><p>现在我们在主机查看 NVIDIA 显卡信息：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">nvidia-smi</span></span>
<span class="line"></span></code></pre></div><p>得到 CUDA 版本，这个版本是你可以安装 CUDA 的最高版本，CUDA 是向下兼容的，因此可以使用比这更小的版本。</p>`,6),m={class:"hint-container info"},v=a("p",{class:"hint-container-title"},"升级显卡驱动",-1),k={href:"https://pytorch.org/blog/deprecation-cuda-python-support/",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>其次：</p><ul><li><strong>不需要</strong> 在 Windows 上安装 CUDA 驱动</li><li><strong>不需要</strong> 在 Windows 上安装 cuDNN 组件</li><li><strong>不需要</strong> 在 WSL 2 内安装显卡驱动或其他</li><li><strong>不需要</strong> 在容器内安装 CUDA 或其他</li></ul><p>这就是全部了，如果上述条件都满足就可以使用 PyTorch、TensorFlow 或任何你需要的环境继续了？</p><p>这是因为 WSL 2 内核支持的 Docker 已经支持 <code>--gpus</code> 了（Docker 版本大于 19.03 即可），再也不需要 <code>nvidia-docker2</code> 来工作了。</p><h2 id="4-安装-cuda-容器" tabindex="-1"><a class="header-anchor" href="#4-安装-cuda-容器"><span>4. 安装 CUDA 容器</span></a></h2><p>拉取 CUDA 11.6 Ubuntu 20.04 镜像（也可以直接拉取 PyTorch 镜像）：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pull</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">nvidia/cuda:11.6.0-base-ubuntu20.04</span></span>
<span class="line"></span></code></pre></div><p>创建容器，可指定参数：</p><ul><li>如果需要读外部数据请挂载目录或磁盘，如 <code>-v /mnt/d/docker_shared:/shared_data</code>（WSL 2 内的磁盘路径为 <code>/mnt/c</code>、<code>/mnt/d</code>，对应 C、D 盘）</li><li>如果需要使用 Jupyter Notebook 请映射端口，如 <code>-p 8888:8888</code></li><li>如果机器有多个显卡，可以指定其序号 <code>--gpus 1,3</code>，一块 GPU 只能分配到一个正在运行的容器内</li></ul><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">run</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-itd</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">--gpus</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">all</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">--name</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ub-cu11.6</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">nvidia/cuda:11.6.0-base-ubuntu20.04</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/bash</span></span>
<span class="line"></span></code></pre></div><p>创建一个更复杂的容器：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">run</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-itd</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">-v</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/mnt/d/docker_shared:/shared_data</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">-p</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">8888</span><span style="color:#CE9178;">:8888</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">--gpus</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">all</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">--name</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ub-cu11.6</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">nvidia/cuda:11.6.0-base-ubuntu20.04</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/bash</span></span>
<span class="line"></span></code></pre></div><p>进入容器：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">exec</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-it</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ub-cu11.6</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/bash</span></span>
<span class="line"></span></code></pre></div><p>现在和 Linux 系统一致了。</p><h2 id="5-在容器内安装深度学习环境" tabindex="-1"><a class="header-anchor" href="#5-在容器内安装深度学习环境"><span>5. 在容器内安装深度学习环境</span></a></h2><p>更新镜像源（以阿里云为例）：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">mv</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/etc/apt/sources.list</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/etc/apt/sources.list-bak</span></span>
<span class="line"><span style="color:#DCDCAA;">echo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span></span>
<span class="line"><span style="color:#CE9178;">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span></span>
<span class="line"><span style="color:#CE9178;">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span></span>
<span class="line"><span style="color:#CE9178;">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span></span>
<span class="line"><span style="color:#CE9178;">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse&#39;</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#CE9178;">/etc/apt/sources.list</span></span>
<span class="line"></span></code></pre></div><p>配置镜像后，下列操作基本为满速，十几分钟即可安装完成全部依赖。</p><p>安装工具：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">apt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">update</span></span>
<span class="line"><span style="color:#DCDCAA;">apt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">upgrade</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-y</span></span>
<span class="line"><span style="color:#DCDCAA;">apt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">sudo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">vim</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">wget</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">curl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">git</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">zip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">unzip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">tar</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-y</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">apt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">python3-pip</span></span>
<span class="line"></span></code></pre></div><p>（可选）添加用户，并将用户可执行文件加入 PATH：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">useradd</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-r</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-m</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-s</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/bash</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">admin</span></span>
<span class="line"><span style="color:#6A9955;"># 如果提示输入密码则输入密码</span></span>
<span class="line"><span style="color:#6A9955;"># 如果没有提示则使用下面的命令修改密码</span></span>
<span class="line"><span style="color:#DCDCAA;">passwd</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">admin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">su</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">admin</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span></span>
<span class="line"><span style="color:#DCDCAA;">echo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;export PATH=&quot;/home/admin/.local/bin:$PATH&quot;&#39;</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#CE9178;">~/.bashrc</span></span>
<span class="line"><span style="color:#DCDCAA;">source</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">~/.bashrc</span></span>
<span class="line"></span></code></pre></div><p>安装 Python 环境和常见依赖：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">python3</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-m</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-i</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">https://pypi.tuna.tsinghua.edu.cn/simple</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--upgrade</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pip</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 配置负载均衡的 PyPI 镜像，可快速选择较快的镜像源</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">config</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">global.extra-index-url</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;https://pypi.tuna.tsinghua.edu.cn/simple/ https://mirrors.aliyun.com/pypi/simple/ https://repo.huaweicloud.com/repository/pypi/simple/ https://mirrors.bfsu.edu.cn/pypi/web/simple/&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-python</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-contrib-python</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-python-headless</span></span>
<span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">opencv-contrib-python-headless</span></span>
<span class="line"></span></code></pre></div><p>安装 PyTorch：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">torch</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">torchvision</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">torchaudio</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--extra-index-url</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">https://download.pytorch.org/whl/cu116</span></span>
<span class="line"></span></code></pre></div><p>（可选）安装 YOLOv8 环境：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ultralytics</span></span>
<span class="line"></span></code></pre></div><p>测试 YOLOv8 在 3070Ti 上的速度：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">admin@f292841cc5bf:~$</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">yolo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">predict</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">model=yolov8x.pt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">source=&quot;bus.jpg&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">Ultralytics</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">YOLOv8.0.34</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">🚀</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python-3.8.10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">torch-1.13.1+cu116</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">CUDA:0</span><span style="color:#D4D4D4;"> (NVIDIA </span><span style="color:#CE9178;">GeForce</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">RTX</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3070</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Ti</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Laptop</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">GPU,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">8192</span><span style="color:#CE9178;">MiB</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">YOLOv8x</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">summary</span><span style="color:#D4D4D4;"> (fused): 268 layers, 68200608 parameters, 0 gradients, 257.8 GFLOPs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#CE9178;">/1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/home/admin/bus.jpg:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">x480</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">persons,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bicycle,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bus,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">32.4</span><span style="color:#CE9178;">ms</span></span>
<span class="line"><span style="color:#DCDCAA;">Speed:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">9.3</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pre-process,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">32.4</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">inference,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2.3</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">postprocess</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">per</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">at</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">shape</span><span style="color:#D4D4D4;"> (1, </span><span style="color:#B5CEA8;">3</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">admin@f292841cc5bf:~$</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">yolo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">predict</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">model=yolov8x.pt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">source=&quot;bus.jpg&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">Ultralytics</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">YOLOv8.0.34</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">🚀</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python-3.8.10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">torch-1.13.1+cu116</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">CUDA:0</span><span style="color:#D4D4D4;"> (NVIDIA </span><span style="color:#CE9178;">GeForce</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">RTX</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3070</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Ti</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Laptop</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">GPU,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">8192</span><span style="color:#CE9178;">MiB</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">YOLOv8x</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">summary</span><span style="color:#D4D4D4;"> (fused): 268 layers, 68200608 parameters, 0 gradients, 257.8 GFLOPs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#CE9178;">/1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/home/admin/bus.jpg:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">x480</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">persons,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bicycle,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bus,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">32.1</span><span style="color:#CE9178;">ms</span></span>
<span class="line"><span style="color:#DCDCAA;">Speed:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2.0</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pre-process,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">32.1</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">inference,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2.0</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">postprocess</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">per</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">at</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">shape</span><span style="color:#D4D4D4;"> (1, </span><span style="color:#B5CEA8;">3</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">admin@f292841cc5bf:~$</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">yolo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">predict</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">model=yolov8s.pt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">source=&quot;bus.jpg&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">Ultralytics</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">YOLOv8.0.34</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">🚀</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python-3.8.10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">torch-1.13.1+cu116</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">CUDA:0</span><span style="color:#D4D4D4;"> (NVIDIA </span><span style="color:#CE9178;">GeForce</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">RTX</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3070</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Ti</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Laptop</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">GPU,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">8192</span><span style="color:#CE9178;">MiB</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">YOLOv8s</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">summary</span><span style="color:#D4D4D4;"> (fused): 168 layers, 11156544 parameters, 0 gradients, 28.6 GFLOPs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#CE9178;">/1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/home/admin/bus.jpg:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">x480</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">persons,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bus,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">13.0</span><span style="color:#CE9178;">ms</span></span>
<span class="line"><span style="color:#DCDCAA;">Speed:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1.9</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pre-process,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">13.0</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">inference,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2.3</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">postprocess</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">per</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">at</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">shape</span><span style="color:#D4D4D4;"> (1, </span><span style="color:#B5CEA8;">3</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">admin@f292841cc5bf:~$</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">yolo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">predict</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">model=yolov8n.pt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">source=&quot;bus.jpg&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">Ultralytics</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">YOLOv8.0.34</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">🚀</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python-3.8.10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">torch-1.13.1+cu116</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">CUDA:0</span><span style="color:#D4D4D4;"> (NVIDIA </span><span style="color:#CE9178;">GeForce</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">RTX</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3070</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Ti</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Laptop</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">GPU,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">8192</span><span style="color:#CE9178;">MiB</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">YOLOv8n</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">summary</span><span style="color:#D4D4D4;"> (fused): 168 layers, 3151904 parameters, 0 gradients, 8.7 GFLOPs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#CE9178;">/1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/home/admin/bus.jpg:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">x480</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">persons,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bus,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">stop</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">sign,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">10.5</span><span style="color:#CE9178;">ms</span></span>
<span class="line"><span style="color:#DCDCAA;">Speed:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2.3</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pre-process,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">10.5</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">inference,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2.1</span><span style="color:#CE9178;">ms</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">postprocess</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">per</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">image</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">at</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">shape</span><span style="color:#D4D4D4;"> (1, </span><span style="color:#B5CEA8;">3</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">640</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function B(x,_){const o=c("RouterLink"),p=c("router-link"),t=c("ExternalLinkIcon");return D(),y("div",null,[C,a("p",null,[s("在 "),n(o,{to:"/docker/docker-tutorial/deeplearning-env.html"},{default:l(()=>[s("Docker 搭建深度学习环境")]),_:1}),s(" 一文中，我们使用 Ubuntu 搭建了 Docker 下的深度学习环境。而 WSL 2 同样也提供了完整的 CUDA 支持，我们可以在 Windows 下享受 Linux 环境下的优势。")]),a("nav",d,[a("ul",null,[a("li",null,[n(p,{to:"#1-wsl-2-进行深度学习的最佳实践"},{default:l(()=>[s("1. WSL 2 进行深度学习的最佳实践")]),_:1})]),a("li",null,[n(p,{to:"#2-条件准备"},{default:l(()=>[s("2. 条件准备")]),_:1})]),a("li",null,[n(p,{to:"#3-如何使用"},{default:l(()=>[s("3. 如何使用")]),_:1})]),a("li",null,[n(p,{to:"#4-安装-cuda-容器"},{default:l(()=>[s("4. 安装 CUDA 容器")]),_:1})]),a("li",null,[n(p,{to:"#5-在容器内安装深度学习环境"},{default:l(()=>[s("5. 在容器内安装深度学习环境")]),_:1})])])]),E,a("p",null,[s("【A】例如使用 VS Code 开发，需要安装 Docker 和远程开发插件。请参考 "),n(o,{to:"/docker/docker-tutorial/vscode-use-docker.html"},{default:l(()=>[s("VS Code 使用 Docker")]),_:1}),s("。同样的 PyCharm 和其他 JetBrain 系列 IDE 也支持容器内开发。推荐使用挂载到 Windows 下的路径进行开发，然后使用远程开发能力，在 Windows 下实时预览生成结果。")]),u,a("p",null,[s("【A】请参考 "),n(o,{to:"/docker/wsl-docker/wsl-docker-config.html"},{default:l(()=>[s("基于 WSL 2 的 Docker 配置说明")]),_:1}),s("。")]),A,a("p",null,[s("如果你希望把整个 WSL 2 都备份了，可以使用 "),h,s(" 来导出为一个文件，详情见 "),n(o,{to:"/docker/wsl-docker/migrate-docker-location.html"},{default:l(()=>[s("迁移 Docker 的位置")]),_:1}),s("。")]),b,a("div",m,[v,a("p",null,[s("如果你的 CUDA 版本小于 11.6 就建议升级显卡驱动了，PyTorch 即将取消 Python 3.7 和 CUDA 11.6 的支持（自 2023/2/1 开始，见 "),a("a",k,[s("官方博客"),n(t)]),s("），显卡驱动安装最新版通常不会出问题。")])]),g])}const L=r(i,[["render",B],["__file","wsl-deeplearning-env.html.vue"]]);export{L as default};
