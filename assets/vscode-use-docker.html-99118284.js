import{_ as d,M as t,p as r,q as l,R as e,N as a,V as n,t as s,a1 as p}from"./framework-546207d5.js";const i={},k=e("h1",{id:"vs-code-使用-docker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vs-code-使用-docker","aria-hidden":"true"},"#"),s(" VS Code 使用 Docker")],-1),u={class:"table-of-contents"},h=p(`<h2 id="_1-开始使用" tabindex="-1"><a class="header-anchor" href="#_1-开始使用" aria-hidden="true">#</a> 1. 开始使用</h2><p>现在，我们可以在 Windows 或 Mac OS 上使用 Docker，不过需要 Docker Desktop 来管理 Docker 容器。而且 Windows 现在已经默认将 WSL2 作为 Docker 宿主，其效率远高于安装一个完整的虚拟机。</p><p>VS Code 等开发工具提供了扩展，让你可以使用本地 Docker Desktop 服务。你可以创建容器化应用、将应用部署到容器以及调试容器上运行的应用。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>现在，当我们安装 Docker 之后，创建一个示例容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-dp</span> <span class="token number">80</span>:80 docker/getting-started
</code></pre></div><p>打开 <code>http://localhost/tutorial/</code> 可以看到 Docker 文档。</p><p>为了使用 VS Code 的 Docker 功能，需要 VS Code 先安装下列扩展，新版本的 VS Code 已经默认安装：</p><ul><li><code>ms-azuretools.vscode-docker</code></li><li><code>ms-vscode-remote.remote-containers</code></li></ul><div class="hint-container tip"><p class="hint-container-title">安装扩展</p><p>安装扩展的命令是：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>code --install-extension <span class="token operator">&lt;</span>Extension_ID<span class="token operator">&gt;</span>
</code></pre></div><p>需求确保 <code>code</code> 命令在路径上，Windows 上需要手动添加，路径在安装目录的 <code>bin/</code> 下，类似于 <code>C:\\Program Files\\Microsoft VS Code\\bin</code>。</p></div><p>在 VS Code 的 Docker 侧边栏中有容器、镜像、仓库、网络、卷、上下文和帮助信息。可以创建、删除和管理所有容器和镜像。</p><h2 id="_2-容器内开发" tabindex="-1"><a class="header-anchor" href="#_2-容器内开发" aria-hidden="true">#</a> 2. 容器内开发</h2><p>我们可以在容器内使用 VS Code 远程功能进行开发。</p><p>在此之前，需要有一个正在运行的容器，例如上面的 <code>docker/getting-started</code>。</p><p>首先在 VS Code 中使用 <code>Dev containers: attach to running container</code> 命令（或者在状态栏中点击绿色的 Remote 按钮，再点击此命令），将打开一个新的 VS Code 窗口，这里可以对容器进行各种操作，并且会自动打开一个 Shell 窗口。</p><p>此时 VS Code 还将在容器内自动安装 VS Code 组件以支持远程开发。</p><p>在容器内输入命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>
<span class="token function">mkdir</span> workspace
</code></pre></div><p>然后在 VS Code 中选择打开文件夹，，打开刚创建的文件夹 <code>workspace</code> 即可进行开发。</p><p>需要注意的是，有一些插件需要安装在容器内才能工作。</p><h2 id="_3-创建应用容器" tabindex="-1"><a class="header-anchor" href="#_3-创建应用容器" aria-hidden="true">#</a> 3. 创建应用容器</h2><p>下面从 项目开始：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/docker/getting-started.git <span class="token parameter variable">--depth</span> <span class="token number">1</span>
<span class="token builtin class-name">cd</span> getting-started/app
code <span class="token builtin class-name">.</span>
</code></pre></div><p>创建 <code>Dockerfile</code> 文件：</p><div class="language-docker" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> node:18.13.0-alpine</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> . .</span>
<span class="token instruction"><span class="token keyword">RUN</span> yarn install --production</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;node&quot;</span>, <span class="token string">&quot;/app/src/index.js&quot;</span>]</span>
</code></pre></div><p>可以直接使用 VS Code，右键 <code>Dockerfile</code> 文件或者使用命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> getting-started <span class="token builtin class-name">.</span>
</code></pre></div><p>镜像构建完成后，使用此镜像启动容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-dp</span> <span class="token number">3000</span>:3000 getting-started
</code></pre></div><p>打开 <code>http://localhost:3000</code> 查看效果。</p><hr class="footnotes-sep">`,30),g={class:"footnotes"},_={class:"footnotes-list"},f={id:"footnote1",class:"footnote-item"},b={href:"https://learn.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial",target:"_blank",rel:"noopener noreferrer"},m=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function v(x,C){const o=t("router-link"),c=t("ExternalLinkIcon");return r(),l("div",null,[k,e("nav",u,[e("ul",null,[e("li",null,[a(o,{to:"#_1-开始使用"},{default:n(()=>[s("1. 开始使用")]),_:1})]),e("li",null,[a(o,{to:"#_2-容器内开发"},{default:n(()=>[s("2. 容器内开发")]),_:1})]),e("li",null,[a(o,{to:"#_3-创建应用容器"},{default:n(()=>[s("3. 创建应用容器")]),_:1})])])]),h,e("section",g,[e("ol",_,[e("li",f,[e("p",null,[s("教程：使用 Visual Studio Code 创建和共享 Docker 应用，Microsoft，"),e("a",b,[s("https://learn.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial"),a(c)]),s(),m])])])])])}const V=d(i,[["render",v],["__file","vscode-use-docker.html.vue"]]);export{V as default};
