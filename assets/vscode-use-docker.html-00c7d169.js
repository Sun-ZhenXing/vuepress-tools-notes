import{_ as p,r as l,o as c,c as r,b as s,a,w as n,d as o,e as d}from"./app-c6e9f3a7.js";const i={},D=s("h1",{id:"vs-code-使用-docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vs-code-使用-docker","aria-hidden":"true"},"#"),o(" VS Code 使用 Docker")],-1),y={class:"table-of-contents"},h=d(`<h2 id="1-开始使用" tabindex="-1"><a class="header-anchor" href="#1-开始使用" aria-hidden="true">#</a> 1. 开始使用</h2><p>现在，我们可以在 Windows 或 Mac OS 上使用 Docker，不过需要 Docker Desktop 来管理 Docker 容器。而且 Windows 现在已经默认将 WSL 2 作为 Docker 宿主，其效率远高于安装一个完整的虚拟机。</p><p>VS Code 等开发工具提供了扩展，让你可以使用本地 Docker Desktop 服务。你可以创建容器化应用、将应用部署到容器以及调试容器上运行的应用。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>现在，当我们安装 Docker 之后，创建一个示例容器：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">run</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-dp</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">80</span><span style="color:#CE9178;">:80</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docker/getting-started</span></span>
<span class="line"></span></code></pre></div><p>打开 <code>http://localhost/tutorial/</code> 可以看到 Docker 文档。</p><p>为了使用 VS Code 的 Docker 功能，需要 VS Code 先安装下列扩展，新版本的 VS Code 已经默认安装：</p><ul><li><code>ms-azuretools.vscode-docker</code></li><li><code>ms-vscode-remote.remote-containers</code></li></ul><div class="hint-container tip"><p class="hint-container-title">安装扩展</p><p>安装扩展的命令是：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">code</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--install-extension</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#CE9178;">Extension_I</span><span style="color:#D4D4D4;">D&gt;</span></span>
<span class="line"></span></code></pre></div><p>需求确保 <code>code</code> 命令在路径上，Windows 上需要手动添加，路径在安装目录的 <code>bin/</code> 下，类似于 <code>C:\\Program Files\\Microsoft VS Code\\bin</code>。</p></div><p>在 VS Code 的 Docker 侧边栏中有容器、镜像、仓库、网络、卷、上下文和帮助信息。可以创建、删除和管理所有容器和镜像。</p><h2 id="2-容器内开发" tabindex="-1"><a class="header-anchor" href="#2-容器内开发" aria-hidden="true">#</a> 2. 容器内开发</h2><p>我们可以在容器内使用 VS Code 远程功能进行开发。</p><p>在此之前，需要有一个正在运行的容器，例如上面的 <code>docker/getting-started</code>。</p><p>首先在 VS Code 中使用 <code>Dev containers: attach to running container</code> 命令（或者在状态栏中点击绿色的 Remote 按钮，再点击此命令），将打开一个新的 VS Code 窗口，这里可以对容器进行各种操作，并且会自动打开一个 Shell 窗口。</p><p>此时 VS Code 还将在容器内自动安装 VS Code 组件以支持远程开发。</p><p>在容器内输入命令：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">cd</span></span>
<span class="line"><span style="color:#DCDCAA;">mkdir</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">workspace</span></span>
<span class="line"></span></code></pre></div><p>然后在 VS Code 中选择打开文件夹，，打开刚创建的文件夹 <code>workspace</code> 即可进行开发。</p><p>需要注意的是，有一些插件需要安装在容器内才能工作。</p><h2 id="3-创建应用容器" tabindex="-1"><a class="header-anchor" href="#3-创建应用容器" aria-hidden="true">#</a> 3. 创建应用容器</h2><p>下面从 项目开始：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">git</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">clone</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">https://github.com/docker/getting-started.git</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--depth</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">getting-started/app</span></span>
<span class="line"><span style="color:#DCDCAA;">code</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">.</span></span>
<span class="line"></span></code></pre></div><p>创建 <code>Dockerfile</code> 文件：</p><div class="language-docker" data-ext="docker"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">FROM</span><span style="color:#D4D4D4;"> node:18.13.0-alpine</span></span>
<span class="line"><span style="color:#569CD6;">WORKDIR</span><span style="color:#D4D4D4;"> /app</span></span>
<span class="line"><span style="color:#569CD6;">COPY</span><span style="color:#D4D4D4;"> . .</span></span>
<span class="line"><span style="color:#569CD6;">RUN</span><span style="color:#D4D4D4;"> yarn install --production</span></span>
<span class="line"><span style="color:#569CD6;">CMD</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;node&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;/app/src/index.js&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><p>可以直接使用 VS Code，右键 <code>Dockerfile</code> 文件或者使用命令：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">build</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-t</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">getting-started</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">.</span></span>
<span class="line"></span></code></pre></div><p>镜像构建完成后，使用此镜像启动容器：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">run</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-dp</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3000</span><span style="color:#CE9178;">:3000</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">getting-started</span></span>
<span class="line"></span></code></pre></div><p>打开 <code>http://localhost:3000</code> 查看效果。</p><hr class="footnotes-sep">`,30),u={class:"footnotes"},C={class:"footnotes-list"},k={id:"footnote1",class:"footnote-item"},E={href:"https://learn.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial",target:"_blank",rel:"noopener noreferrer"},f=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function g(_,b){const e=l("router-link"),t=l("ExternalLinkIcon");return c(),r("div",null,[D,s("nav",y,[s("ul",null,[s("li",null,[a(e,{to:"#1-开始使用"},{default:n(()=>[o("1. 开始使用")]),_:1})]),s("li",null,[a(e,{to:"#2-容器内开发"},{default:n(()=>[o("2. 容器内开发")]),_:1})]),s("li",null,[a(e,{to:"#3-创建应用容器"},{default:n(()=>[o("3. 创建应用容器")]),_:1})])])]),h,s("section",u,[s("ol",C,[s("li",k,[s("p",null,[o("教程：使用 Visual Studio Code 创建和共享 Docker 应用，Microsoft，"),s("a",E,[o("https://learn.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial"),a(t)]),o(),f])])])])])}const x=p(i,[["render",g],["__file","vscode-use-docker.html.vue"]]);export{x as default};
