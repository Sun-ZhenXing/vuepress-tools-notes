import{_ as d,r as c,o as i,c as D,b as s,a as o,w as e,d as a,f as u,e as t}from"./app-e1d9226b.js";const y={},h=s("h1",{id:"docker-配置远程连接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#docker-配置远程连接","aria-hidden":"true"},"#"),a(" Docker 配置远程连接")],-1),k=s("p",null,"作者通过 Windows 10 远程连接 Ubuntu 服务器内的 Docker，可以使用 VS Code/JetBrains IDE 的远程开发能力，从而可以快速切换 Docker 容器进行开发。",-1),E=s("p",null,"下面的方法适用于 Debian/Ubuntu 服务器，也可能适用于更多系统，但只在 Ubuntu 上进行测试过。客户端可以是任意支持 Docker 的系统。",-1),C=s("p",null,"下面介绍两种方法来配置 Docker 远程连接，建议只采用第二种方法。",-1),_={class:"table-of-contents"},b=t(`<h2 id="_1-使用-http-tcp-协议" tabindex="-1"><a class="header-anchor" href="#_1-使用-http-tcp-协议" aria-hidden="true">#</a> 1. 使用 HTTP/TCP 协议</h2><div class="hint-container danger"><p class="hint-container-title">警告！</p><p>此方式将端口暴露出来，除非在安全的内部网络中，否则绝不应该使用此方法，此方式将暴露 root 权限。</p></div><p>下面的操作需要远程和本地端都安装 Docker，本地至少安装 Docker 客户端。</p><h3 id="_1-1-配置服务端" tabindex="-1"><a class="header-anchor" href="#_1-1-配置服务端" aria-hidden="true">#</a> 1.1 配置服务端</h3><p>修改文件 <code>/usr/lib/systemd/system/docker.service</code>，将 <code>ExecStart</code> 这一行注释：</p><div class="language-properties" data-ext="properties"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">ExecStart</span><span style="color:#D4D4D4;">=/usr/bin/dockerd -H fd:// --</span><span style="color:#569CD6;">containerd</span><span style="color:#D4D4D4;">=/run/containerd/containerd.sock</span></span>
<span class="line"></span></code></pre></div><p>然后写入下面这一行：</p><div class="language-properties" data-ext="properties"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">ExecStart</span><span style="color:#D4D4D4;">=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --</span><span style="color:#569CD6;">containerd</span><span style="color:#D4D4D4;">=/run/containerd/containerd.sock</span></span>
<span class="line"></span></code></pre></div><p>然后重启服务：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">sudo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">systemctl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">daemon-reload</span></span>
<span class="line"><span style="color:#DCDCAA;">sudo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">systemctl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">restart</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docker</span></span>
<span class="line"></span></code></pre></div><p>下面可以远程访问这个端口了，访问 <code>http://&lt;your_ip&gt;:2375/info</code> 可以看到 JSON 信息。</p><h3 id="_1-2-配置客户端" tabindex="-1"><a class="header-anchor" href="#_1-2-配置客户端" aria-hidden="true">#</a> 1.2 配置客户端</h3><p>可以使用两种方法进行连接。例如你的服务器暴露地址为 <code>tcp://192.168.0.110:2375</code>，请将其替换为自己的 IP 地址。</p><p>第一种是直接暴露出变量，<code>docker</code> 会自动检测。这种方式适合临时使用。</p>`,14),x=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"export"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"DOCKER_HOST"),s("span",{style:{color:"#D4D4D4"}},"="),s("span",{style:{color:"#CE9178"}},"tcp://192.168.0.110:2375")]),a(`
`),s("span",{class:"line"})])])],-1),g=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#DCDCAA"}},"set"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#CE9178"}},"DOCKER_HOST=tcp://192.168.0.110:2375")]),a(`
`),s("span",{class:"line"})])])],-1),v=t(`<p>下面的 <code>docker</code> 命令将自动选择 Context。</p><p>第二种方法是创建一个新的 Context，这种方式适合长期使用，例如创建一个名为 <code>my-remote</code> 的 Context：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">context</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">create</span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">--description</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;local vm docker test&quot;</span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">--docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;host=tcp://192.168.0.110:2375&quot;</span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">my-remote</span></span>
<span class="line"></span></code></pre></div><p>其中 <code>--description &quot;...&quot;</code> 是可选的描述。然后使用这个 Context：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">context</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">use</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">my-remote</span></span>
<span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">info</span></span>
<span class="line"></span></code></pre></div><p>下面就可以正常使用了。</p><h2 id="_2-使用-ssh-隧道连接" tabindex="-1"><a class="header-anchor" href="#_2-使用-ssh-隧道连接" aria-hidden="true">#</a> 2. 使用 SSH 隧道连接</h2><p>第一种方案仅适用于本地网络或者内部的安全网络，否则将暴露 root 权限，导致服务器被入侵。</p><p>这一种方案将使 Docker 直接连接到远程的 Docker Daemon，使用 SSH 确保安全。通常来说，Docker Daemon 只能通过 Unix Domain Socket 进行连接，但是通过 SSH 隧道可以连接另一台机器上的 Docker Daemon。Docker 官方文档也提供了相关功能描述。</p><p>连接之前，需要配置好 SSH 免密登录账户，并且该账户需要有访问 Docker Unix Domain Socket 的权限。</p><h3 id="_2-1-配置用户权限" tabindex="-1"><a class="header-anchor" href="#_2-1-配置用户权限" aria-hidden="true">#</a> 2.1 配置用户权限</h3><p>下面的操作在服务端进行。</p><p>如果你使用 root 用户进行连接，请跳过此步骤。但建议不要使用 root 用户来创建此连接。</p><p>由于需要账户有访问 Docker Unix Domain Socket 的权限，可以创建新用户然后授权。</p><p>查看是否有 <code>docker</code> 组：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">groups</span></span>
<span class="line"></span></code></pre></div><p>如果没有，添加 <code>docker</code> 组：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">sudo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">groupadd</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docker</span></span>
<span class="line"></span></code></pre></div><p>简单起见，我们可以在默认用户上赋予权限，创建新用户同理：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">sudo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">usermod</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-a</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-G</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">$USER</span></span>
<span class="line"></span></code></pre></div><p>下面查看 Docker Socket 权限：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">cat</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/usr/lib/systemd/system/docker.socket</span></span>
<span class="line"></span></code></pre></div><p>默认情况下，有这样的设置 <code>SocketMode=0660</code>，可以将其改为 <code>0666</code> 来授权给普通用户。</p><p>设置完成后重启：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">sudo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">systemctl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">daemon-reload</span></span>
<span class="line"><span style="color:#DCDCAA;">sudo</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">systemctl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">restart</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docker.socket</span></span>
<span class="line"></span></code></pre></div><p>设置完成后，默认用户访问 Docker 资源不需要加上 <code>sudo</code> 了，如果不配置下面的操作也无法进行。</p><h3 id="_2-1-创建自动登录的-ssh-连接" tabindex="-1"><a class="header-anchor" href="#_2-1-创建自动登录的-ssh-连接" aria-hidden="true">#</a> 2.1 创建自动登录的 SSH 连接</h3><p>下面的操作在客户端进行。</p><p>如果你的系统已经有了密钥对，可以直接复制到远程服务器的 SSH 公钥列表中。否则，先生成密钥对：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">ssh-keygen</span></span>
<span class="line"></span></code></pre></div><p>回车两次，生成下面的文件：</p><ul><li><code>~/.ssh/id_rsa</code></li><li><code>~/.ssh/id_rsa.pub</code></li></ul><p>将 <code>id_rsa.pub</code> 文件的内容复制到远程服务器的 <code>~/.ssh/authorized_keys</code> 内即可。</p><p>现在可以直接登录远程服务器了：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">ssh</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#CE9178;">use</span><span style="color:#D4D4D4;">r&gt;</span><span style="color:#CE9178;">@</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;">p&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-3-远程连接" tabindex="-1"><a class="header-anchor" href="#_2-3-远程连接" aria-hidden="true">#</a> 2.3 远程连接</h3>`,36),A=s("p",null,[a("可以参考 "),s("a",{href:"#_1-2-%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF"},"1.2 配置客户端"),a("，只需要将 URL 替换为 "),s("code",null,"ssh://<user>@<ip>"),a(" 即可。")],-1);function m(S,f){const n=c("router-link"),r=c("CodeTabs");return i(),D("div",null,[h,k,E,C,s("nav",_,[s("ul",null,[s("li",null,[o(n,{to:"#_1-使用-http-tcp-协议"},{default:e(()=>[a("1. 使用 HTTP/TCP 协议")]),_:1}),s("ul",null,[s("li",null,[o(n,{to:"#_1-1-配置服务端"},{default:e(()=>[a("1.1 配置服务端")]),_:1})]),s("li",null,[o(n,{to:"#_1-2-配置客户端"},{default:e(()=>[a("1.2 配置客户端")]),_:1})])])]),s("li",null,[o(n,{to:"#_2-使用-ssh-隧道连接"},{default:e(()=>[a("2. 使用 SSH 隧道连接")]),_:1}),s("ul",null,[s("li",null,[o(n,{to:"#_2-1-配置用户权限"},{default:e(()=>[a("2.1 配置用户权限")]),_:1})]),s("li",null,[o(n,{to:"#_2-1-创建自动登录的-ssh-连接"},{default:e(()=>[a("2.1 创建自动登录的 SSH 连接")]),_:1})]),s("li",null,[o(n,{to:"#_2-3-远程连接"},{default:e(()=>[a("2.3 远程连接")]),_:1})])])])])]),b,o(r,{id:"53",data:[{id:"Linux"},{id:"Windows"}],"tab-id":"shell"},{title0:e(({value:l,isActive:p})=>[a("Linux")]),title1:e(({value:l,isActive:p})=>[a("Windows")]),tab0:e(({value:l,isActive:p})=>[x]),tab1:e(({value:l,isActive:p})=>[g]),_:1}),v,u(" markdownlint-disable MD051 "),A])}const T=d(y,[["render",m],["__file","docker-remote-context.html.vue"]]);export{T as default};
