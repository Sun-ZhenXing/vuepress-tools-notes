import{_ as r,r as c,o as p,c as d,b as s,a,w as l,d as e,e as o}from"./app-kpmV2e-e.js";const i={},y=s("h1",{id:"docker-内替换-systemctl",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#docker-内替换-systemctl","aria-hidden":"true"},"#"),e(" Docker 内替换 systemctl")],-1),h={class:"table-of-contents"},D=o('<h2 id="1-问题背景" tabindex="-1"><a class="header-anchor" href="#1-问题背景" aria-hidden="true">#</a> 1. 问题背景</h2><p>Docker 只是提供了进程隔离，而不是真正的虚拟机。Docker 容器的入口代替了 Linux 的 <code>init</code> 进程，所以也没有 <code>systemd</code> 等服务。Docker 应用一般都是单容器单应用，一般也不使用 <code>systemctl</code> 进行管理，如常见的 Nginx、MySQL 等在官方镜像中都是直接提供的，相互独立运行。</p><p>我们常常需要对一些历史应用进行容器化，但是有一些应用依赖于 <code>systemctl</code> 命令进行管理。由于在 Docker 容器内部一般是不提供 <code>systemctl</code> 命令的，这对应用的容器化造成阻碍。因此需要在容器内部模拟 <code>systemctl</code> 命令。</p><h2 id="2-解决方案" tabindex="-1"><a class="header-anchor" href="#2-解决方案" aria-hidden="true">#</a> 2. 解决方案</h2><h3 id="21-修改应用" tabindex="-1"><a class="header-anchor" href="#21-修改应用" aria-hidden="true">#</a> 2.1 修改应用</h3><p>最好的方法是找到应用依赖 <code>systemctl</code> 命令的原因，然后修改应用的启动代码，将其生命周期托管给 Docker 本身。但这种方式需要针对具体应用进行修改，需要较大的成本。</p><h3 id="22-模拟-systemctl" tabindex="-1"><a class="header-anchor" href="#22-模拟-systemctl" aria-hidden="true">#</a> 2.2 模拟 systemctl</h3>',7),m=s("code",null,"systemctl",-1),u={href:"https://github.com/gdraheim/docker-systemctl-replacement",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"systemctl",-1),_=o(`<p>在 Debian/Ubutnu 系统中，直接使用下面的命令来安装 <code>docker-systemctl-replacement</code>，安装后效果一致：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">apt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-y</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">systemctl</span></span>
<span class="line"></span></code></pre></div><p>在编写 <code>Dockerfile</code> 时，通常需要将入口换为 <code>systemctl</code> 命令，例如：</p><div class="language-docker" data-ext="docker"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">CMD</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&quot;systemctl&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;-1&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div>`,4),b={href:"https://github.com/gdraheim/docker-systemctl-images",target:"_blank",rel:"noopener noreferrer"},g=o(`<p>另外也可以通过 <code>pip</code> 安装使用：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docker-systemctl-replacement</span></span>
<span class="line"></span></code></pre></div><p>其他系统可以下载源码直接使用。前提是需要提供 Python（2.x 和 3.x 都可以），例如安装 Python 2 版本：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-o</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/systemctl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl.py</span></span>
<span class="line"><span style="color:#DCDCAA;">chmod</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">+x</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/systemctl</span></span>
<span class="line"></span></code></pre></div><p>安装 Python 3 版本：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">curl</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-o</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/systemctl</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl3.py</span></span>
<span class="line"><span style="color:#DCDCAA;">chmod</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">+x</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/bin/systemctl</span></span>
<span class="line"></span></code></pre></div>`,6),C=s("code",null,"docker-systemctl-replacement",-1),E=s("code",null,"systemctl",-1),x={href:"https://github.com/gdraheim/docker-systemctl-replacement#problems-with-systemd-in-docker",target:"_blank",rel:"noopener noreferrer"};function f(v,A){const t=c("router-link"),n=c("ExternalLinkIcon");return p(),d("div",null,[y,s("nav",h,[s("ul",null,[s("li",null,[a(t,{to:"#1-问题背景"},{default:l(()=>[e("1. 问题背景")]),_:1})]),s("li",null,[a(t,{to:"#2-解决方案"},{default:l(()=>[e("2. 解决方案")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#21-修改应用"},{default:l(()=>[e("2.1 修改应用")]),_:1})]),s("li",null,[a(t,{to:"#22-模拟-systemctl"},{default:l(()=>[e("2.2 模拟 systemctl")]),_:1})])])])])]),D,s("p",null,[e("如果应用难以修改，可以模拟 "),m,e(" 命令本身。开源项目 "),s("a",u,[e("gdraheim/docker-systemctl-replacement"),a(n)]),e(" 实现了 "),k,e(" 命令的大部分功能，可以直接使用，一般也很少遇到问题。")]),_,s("p",null,[e("作者也提供了一些示例，可以参考 "),s("a",b,[e("gdraheim/docker-systemctl-images"),a(n)]),e("。")]),g,s("p",null,[e("注意，"),C,e(" 在行为上并不等同于 "),E,e(" 命令，只是提供了相似的命令行接口，具体差异见 "),s("a",x,[e("项目文档"),a(n)]),e("。")])])}const N=r(i,[["render",f],["__file","systemctl.html.vue"]]);export{N as default};
