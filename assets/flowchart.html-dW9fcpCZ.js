import{_ as i,r,o,c as h,b as a,a as e,w as s,d as n,e as d}from"./app-9ZKrydrW.js";const c={},u=a("h1",{id:"mermaid-流程图",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#mermaid-流程图","aria-hidden":"true"},"#"),n(" Mermaid 流程图")],-1),p={class:"table-of-contents"},f=d(`<h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><p>所有的流程图都是由节点、几何图形和边、箭头或线条组成。美人鱼代码定义了这些节点和边的构成和互动方式。</p><p>它还可以容纳不同的箭头类型，多方向的箭头，以及链接到子图和从子图的链接。</p><p>重要提示：不要把 &quot;结束 &quot; 一词作为流程图的节点来输入。将所有或任何一个字母大写，以保持流程图不被破坏，即 &quot;结束 &quot;或 &quot;END&quot;。或者你可以应用这个变通方法。</p><h3 id="普通结点" tabindex="-1"><a class="header-anchor" href="#普通结点" aria-hidden="true">#</a> 普通结点</h3><div class="language-mermaid" data-ext="mermaid"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">flowchart</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">LR</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id</span></span>
<span class="line"></span></code></pre></div>`,6),_=d(`<h3 id="带有文本的结点" tabindex="-1"><a class="header-anchor" href="#带有文本的结点" aria-hidden="true">#</a> 带有文本的结点</h3><p>也可以在框中设置与id不同的文本。如果这样做了几次，将使用为该节点找到的最后一个文本。另外如果你以后为节点定义边，可以省略文本定义。渲染盒子时将使用之前定义的那个。</p><div class="language-mermaid" data-ext="mermaid"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">flowchart</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">LR</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">id1</span><span style="color:#C586C0;">[</span><span style="color:#CE9178;">This is the text in the box</span><span style="color:#C586C0;">]</span></span>
<span class="line"></span></code></pre></div>`,3),m=d('<h2 id="图表" tabindex="-1"><a class="header-anchor" href="#图表" aria-hidden="true">#</a> 图表</h2><h2 id="流程图方向" tabindex="-1"><a class="header-anchor" href="#流程图方向" aria-hidden="true">#</a> 流程图方向</h2><h2 id="节点形状" tabindex="-1"><a class="header-anchor" href="#节点形状" aria-hidden="true">#</a> 节点形状</h2><h2 id="节点之间的链接" tabindex="-1"><a class="header-anchor" href="#节点之间的链接" aria-hidden="true">#</a> 节点之间的链接</h2><h2 id="打破语法的特殊字符" tabindex="-1"><a class="header-anchor" href="#打破语法的特殊字符" aria-hidden="true">#</a> 打破语法的特殊字符</h2><h2 id="子图" tabindex="-1"><a class="header-anchor" href="#子图" aria-hidden="true">#</a> 子图</h2><h2 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h2><h2 id="子图中的方向" tabindex="-1"><a class="header-anchor" href="#子图中的方向" aria-hidden="true">#</a> 子图中的方向</h2><h2 id="相互作用" tabindex="-1"><a class="header-anchor" href="#相互作用" aria-hidden="true">#</a> 相互作用</h2><h2 id="样式和类" tabindex="-1"><a class="header-anchor" href="#样式和类" aria-hidden="true">#</a> 样式和类</h2><h2 id="对fontawesome的基本支持" tabindex="-1"><a class="header-anchor" href="#对fontawesome的基本支持" aria-hidden="true">#</a> 对fontawesome的基本支持</h2><h2 id="图形声明在顶点和链接之间有空格没有分号" tabindex="-1"><a class="header-anchor" href="#图形声明在顶点和链接之间有空格没有分号" aria-hidden="true">#</a> 图形声明在顶点和链接之间有空格，没有分号</h2><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2>',13);function x(C,b){const l=r("router-link"),t=r("Mermaid");return o(),h("div",null,[u,a("nav",p,[a("ul",null,[a("li",null,[e(l,{to:"#基本语法"},{default:s(()=>[n("基本语法")]),_:1}),a("ul",null,[a("li",null,[e(l,{to:"#普通结点"},{default:s(()=>[n("普通结点")]),_:1})]),a("li",null,[e(l,{to:"#带有文本的结点"},{default:s(()=>[n("带有文本的结点")]),_:1})])])]),a("li",null,[e(l,{to:"#图表"},{default:s(()=>[n("图表")]),_:1})]),a("li",null,[e(l,{to:"#流程图方向"},{default:s(()=>[n("流程图方向")]),_:1})]),a("li",null,[e(l,{to:"#节点形状"},{default:s(()=>[n("节点形状")]),_:1})]),a("li",null,[e(l,{to:"#节点之间的链接"},{default:s(()=>[n("节点之间的链接")]),_:1})]),a("li",null,[e(l,{to:"#打破语法的特殊字符"},{default:s(()=>[n("打破语法的特殊字符")]),_:1})]),a("li",null,[e(l,{to:"#子图"},{default:s(()=>[n("子图")]),_:1})]),a("li",null,[e(l,{to:"#流程图"},{default:s(()=>[n("流程图")]),_:1})]),a("li",null,[e(l,{to:"#子图中的方向"},{default:s(()=>[n("子图中的方向")]),_:1})]),a("li",null,[e(l,{to:"#相互作用"},{default:s(()=>[n("相互作用")]),_:1})]),a("li",null,[e(l,{to:"#样式和类"},{default:s(()=>[n("样式和类")]),_:1})]),a("li",null,[e(l,{to:"#对fontawesome的基本支持"},{default:s(()=>[n("对fontawesome的基本支持")]),_:1})]),a("li",null,[e(l,{to:"#图形声明在顶点和链接之间有空格没有分号"},{default:s(()=>[n("图形声明在顶点和链接之间有空格，没有分号")]),_:1})]),a("li",null,[e(l,{to:"#配置"},{default:s(()=>[n("配置")]),_:1})])])]),f,e(t,{id:"mermaid-22",code:"eJxLy8kvT85ILCpR8AniUgCCzBQuAEjsBeo="}),_,e(t,{id:"mermaid-30",code:"eJxLy8kvT85ILCpR8AniUgCCzBTD6JCMzGIFICrJSFUoSa0oUcjMA7OT8itiuQCjchBu"}),m])}const y=i(c,[["render",x],["__file","flowchart.html.vue"]]);export{y as default};
