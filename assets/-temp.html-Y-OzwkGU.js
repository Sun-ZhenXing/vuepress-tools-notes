import{_ as c,r as o,o as t,c as r,b as s,a as n,w as e,d as a,e as i}from"./app-trY4EdQj.js";const D={},d=s("h1",{id:"临时记录",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#临时记录","aria-hidden":"true"},"#"),a(" 临时记录")],-1),y={class:"table-of-contents"},h=i(`<div class="hint-container warning"><p class="hint-container-title">TODO 计划</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 健康检查 healthy</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 重启策略 restart</label></li></ul></div><h2 id="1-容器网络" tabindex="-1"><a class="header-anchor" href="#1-容器网络" aria-hidden="true">#</a> 1. 容器网络</h2><p>将容器的网络绑定到指定网络，并使用别名：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">network</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">connect</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--alias</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docs</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">alex-data-core_default</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">alex-docs</span></span>
<span class="line"></span></code></pre></div><h2 id="2-容器内检查容器-id" tabindex="-1"><a class="header-anchor" href="#2-容器内检查容器-id" aria-hidden="true">#</a> 2. 容器内检查容器 ID</h2><p>以下命令作用于容器内。查看 <code>/proc/self/cgroup</code> 文件，其中包含容器 ID。</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">cat</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/proc/self/cgroup</span></span>
<span class="line"></span></code></pre></div><p>得到 ID 信息：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">head</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/proc/self/cgroup</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">cut</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-d/</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-f3</span></span>
<span class="line"></span></code></pre></div><p>得到 12 位 ID：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">head</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/proc/self/cgroup</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">cut</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-d/</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-f3</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">cut</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-c1-12</span></span>
<span class="line"></span></code></pre></div><h2 id="3-在容器内获取主机-docker-信息" tabindex="-1"><a class="header-anchor" href="#3-在容器内获取主机-docker-信息" aria-hidden="true">#</a> 3. 在容器内获取主机 Docker 信息</h2><p>可用使用主机的 Docker API，然后使用任意 Docker 客户端即可。</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">docker</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">run</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-d</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">--name</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ub22</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">-v</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">/var/run/docker.sock:/var/run/docker.sock</span><span style="color:#D4D4D4;"> </span><span style="color:#D7BA7D;">\\</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">python:3.10.12-bullseye</span></span>
<span class="line"></span></code></pre></div><p>此时在容器内安装 Python 版本的 Docker 客户端 <code>docker</code>：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docker</span></span>
<span class="line"></span></code></pre></div><p>使用 Python 代码获取主机 Docker 信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">client = docker.from_env()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 获取主机 Docker 版本</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(client.version())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 获取全部容器名称</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> container </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> client.containers.list():</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(container.name)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 获取主机镜像列表</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> image </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> client.images.list():</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(image.tags)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="4-容器-health-check" tabindex="-1"><a class="header-anchor" href="#4-容器-health-check" aria-hidden="true">#</a> 4. 容器 Health Check</h2>`,19),u={href:"https://github.com/willfarrell/docker-autoheal",target:"_blank",rel:"noopener noreferrer"},k=s("li",null,[s("code",null,"docker-compose"),a(" 的健康检查")],-1);function C(b,v){const l=o("router-link"),p=o("ExternalLinkIcon");return t(),r("div",null,[d,s("nav",y,[s("ul",null,[s("li",null,[n(l,{to:"#1-容器网络"},{default:e(()=>[a("1. 容器网络")]),_:1})]),s("li",null,[n(l,{to:"#2-容器内检查容器-id"},{default:e(()=>[a("2. 容器内检查容器 ID")]),_:1})]),s("li",null,[n(l,{to:"#3-在容器内获取主机-docker-信息"},{default:e(()=>[a("3. 在容器内获取主机 Docker 信息")]),_:1})]),s("li",null,[n(l,{to:"#4-容器-health-check"},{default:e(()=>[a("4. 容器 Health Check")]),_:1})])])]),h,s("ul",null,[s("li",null,[a("使用 "),s("a",u,[a("autoheal"),n(p)]),a(" 自动重启容器")]),k])])}const E=c(D,[["render",C],["__file","-temp.html.vue"]]);export{E as default};
